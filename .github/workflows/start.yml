name: AW1000-24.10-NSS
on:
  workflow_dispatch:
    inputs:
      build_name:
        description: 'Build name prefix (e.g., B4, CUSTOM)'
        required: false
        default: 'B4'

jobs:
  build:
    if: github.ref == 'refs/heads/24.10-nss'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: 24.10-nss
          fetch-depth: 0       

      - name: Set timezone to Malaysia
        run: |
          sudo ln -sf /usr/share/zoneinfo/Asia/Kuala_Lumpur /etc/localtime
          echo "Asia/Kuala_Lumpur" | sudo tee /etc/timezone
          date

      - name: Show the content of feeds.conf.default
        run: |
          echo "Show the content of feeds.conf.default"
          cat ./feeds.conf.default

      - name: Show available disk space before cleanup
        run: |
          echo "Available disk space before cleanup:"
          df -h

      - name: Free up disk space
        run: |
          echo "Removing unnecessary apt packages and cache..."
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/microsoft/powershell
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          docker image prune -a -f
          sudo rm -rf /var/lib/snapd/cache/*
          sudo rm -rf /home/linuxbrew/.linuxbrew/
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/share/kotlin
          sudo rm -rf /usr/share/rust
          sudo rm -rf /opt/az
          sudo rm -rf /opt/hostedtoolcache/Java_Adopt_jdk
          sudo rm -rf /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk
          sudo rm -rf /var/cache/apt
          sudo rm -rf /var/lib/gems
          sudo rm -rf /var/lib/docker/tmp/*
          sudo rm -rf /usr/local/lib/python*/dist-packages
          sudo rm -rf /usr/local/lib/python*/site-packages
          sudo rm -rf /opt/hostedtoolcache/*/*

      - name: Show available disk space after cleanup
        run: df -h

      - name: Show system info
        run: |
          echo "Kernel version:"
          uname -a
          echo "GCC version:"
          gcc --version
          echo "CPU cores:"
          nproc
          echo "CPU model:"
          grep "model name" /proc/cpuinfo | head -1
          echo "Total memory:"
          free -h

      - name: Set up build dependencies (with 7z)
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-setuptools rsync swig unzip zlib1g-dev file wget \
            p7zip-full

      - name: Update and Install Feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Prepare config file
        run: |
          cp ./nss-setup/nss.config .config
          make defconfig

      - name: Download package sources
        run: make download

      - name: Build tools
        run: make tools/install -j$(nproc) || make tools/install

      - name: Build toolchain
        run: make toolchain/install -j$(nproc) || make toolchain/install

      - name: Build OpenWrt NSS Image
        run: make -j$(nproc)

      - name: Get SHORT SHA
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: Get current date (d-M-Y uppercase)
        run: echo "NOW=$(date '+%d-%b-%Y' | tr 'a-z' 'A-Z')" >> $GITHUB_ENV

      - name: Set build name from input
        run: echo "BUILD_NAME=${{ github.event.inputs.build_name }}" >> $GITHUB_ENV

      - name: Copy Bin File & SSH Key
        run: |
          mkdir -p backup
          cp -r bin backup/bin
          cp key-build.pub key-build key-build.ucert key-build.ucert.revoke \
          feeds.conf.default .config backup/

      - name: Compressing full package into tar.gz and zip
        run: |
          mkdir -p upload
          tar czf Package.tar.gz backup
          7z a -tzip -p"${{ secrets.ZIP_PASSWORD }}" -mem=AES256 upload/Package.zip Package.tar.gz

      - name: Create a release
        uses: ncipollo/release-action@v1
        with:
          name: "${{ env.BUILD_NAME }}-${{ env.NOW }}"
          tag: "${{ env.BUILD_NAME }}-${{ env.SHORT_SHA }}-${{ env.NOW }}"
          generateReleaseNotes: true
          makeLatest: false
          artifacts: |
            upload/Package.zip
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Show release complete URL
        run: |
          echo "Release created:"
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ env.BUILD_NAME }}-${{ env.SHORT_SHA }}-${{ env.NOW }}"
